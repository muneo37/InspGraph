@inject IJSRuntime JS;
@using System.Text;

<canvas id="@Id"></canvas>

@code {
    [Parameter]
    public string Id { get; set; } = "myChart";

    [Parameter]
    public IEnumerable<ChartItem>? ItemsSource { get; set; }

    private IEnumerable<ChartItem>? _itemsSourceCore;
    private IEnumerable<ChartItem>? ItemsSourceCore
    {
        get => this._itemsSourceCore;
        set
        {
            if (this._itemsSourceCore != value)
            {
                this._itemsSourceCore = value;
                UpdateChart();
            }
        }
    }

    protected override void OnParametersSet()
    {
        this.ItemsSourceCore = this.ItemsSource;
    }
    private void UpdateChart()
    {
        if (this.ItemsSource is null)
        {
            return;
        }

        var jsonBuilder = new StringBuilder();
        jsonBuilder.AppendLine("{");
        jsonBuilder.AppendLine("  \"type\": \"scatter\",");
        jsonBuilder.AppendLine("  \"data\": {");
        jsonBuilder.AppendLine("    \"datasets\": [");
        jsonBuilder.AppendLine("       " + string.Join(", \r\n       ", this.ItemsSource.Select(x => x.ToString())));
        jsonBuilder.AppendLine("    ]");
        jsonBuilder.AppendLine("  },");
        jsonBuilder.AppendLine("  \"options\": {");

        jsonBuilder.AppendLine("    \"scales\": { \"xAxes\": [{\"type\": \"linear\", \"position\": \"bottom\", \"ticks\": {\"min\": 0, \"max\": 1000} }], \"yAxes\": [{\"ticks\": {\"min\": -2, \"max\": 2}}] }");

        jsonBuilder.AppendLine("  }");
        jsonBuilder.AppendLine("}");
        var json = jsonBuilder.ToString();
        JS.InvokeVoidAsync("renderChart", this.Id, json);
    }
}