// <auto-generated />
using System;
using InspGraph;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InspGraph.Migrations
{
    [DbContext(typeof(InspectionDataContext))]
    partial class InspectionDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InspGraph.Data.ModuleResult", b =>
                {
                    b.Property<int>("ModuleResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ModuleResultId"));

                    b.Property<string>("DataName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("InspResultId")
                        .HasColumnType("integer");

                    b.Property<double>("ModuleResultData")
                        .HasColumnType("double precision");

                    b.HasKey("ModuleResultId");

                    b.ToTable("ModuleResults");
                });

            modelBuilder.Entity("InspGraph.Data.OperatingHour", b =>
                {
                    b.Property<DateTime>("ReciveSignalTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRunning")
                        .HasColumnType("boolean");

                    b.HasKey("ReciveSignalTime");

                    b.ToTable("OperatingHours");
                });

            modelBuilder.Entity("InspGraph.InspectResult", b =>
                {
                    b.Property<int>("InspectResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InspectResultId"));

                    b.Property<int>("CameraNo")
                        .HasColumnType("integer");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<string>("DefectDetail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("InspTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsOK")
                        .HasColumnType("boolean");

                    b.Property<int>("PCNo")
                        .HasColumnType("integer");

                    b.Property<int>("WorkDataId")
                        .HasColumnType("integer");

                    b.HasKey("InspectResultId");

                    b.ToTable("InspectResults");
                });

            modelBuilder.Entity("InspGraph.WorkData", b =>
                {
                    b.Property<int>("WorkDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkDataId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("WorkDataName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("WorkDataId");

                    b.ToTable("WorkData");
                });
#pragma warning restore 612, 618
        }
    }
}
