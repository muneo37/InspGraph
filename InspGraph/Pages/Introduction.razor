@page "/Introduction"

<h1>Chart.js導入</h1>
<p>Chart.jsのグラフを表示するまでの手順を紹介します。</p>
<p/>

<h3>MVVMなページを用意します。</h3>
<p>※ページの追加・表示方法は割愛します。</p>
<p>ソリューション内にCoreフォルダを作成し、ViewContentBase.cs、DelegateCommand.cs、NotificationObject.csファイルを追加します。</p>
<img src="img/ChartIntro/03.jpg" />
<p/>

<p>ViewModelsフォルダを作成し、ChartViewModel.csクラスを作成します。※名称は表示したいPageに合わせてくださいな</p>
<img src="img/ChartIntro/04.jpg" />
<p/>

<p>ChartViewModelクラスをNotiticationObjectクラスのサブクラスとします。</p>
<img src="img/ChartIntro/05.jpg" />
<p/>

<p>_Imports.razorにViewModelsフォルダのUsing宣言を追加します。</p>
<img src="img/ChartIntro/08.jpg" />
<p/>

<p>表示するページに下記の一行を追加します。</p>
<img src="img/ChartIntro/06.jpg" />
<p/>

<p>Program.csにも追加します。</p>
<img src="img/ChartIntro/10.jpg" />

<p>以上でMVVM化完了です。</p>
<br/>
<br/>
<br/>

<h3>ライブラリファイル追加します。</h3>
<p>wwwroot内にLibフォルダを作成し、Chart.jsのファイルを追加します。</p>

<img src="img/ChartIntro/01.jpg" />
<p/>
<br/>
<br/>
<br/>


<h3>_Layout.cshtmlにranderChart関数を用意します。</h3>

<img src="img/ChartIntro/02.jpg" />
<br/>
<br/>
<br/>
<br/>

<h3>ChartItemクラスと仲間たちをCoreフォルダに追加します。</h3>
<img src="img/ChartIntro/07.jpg" />
<br/>
<br/>
<br/>
<br/>

<h3>SharedフォルダにChat.razorコンポーネントを追加します。</h3>
<p>名前がかぶってしまった。。</p>
<img src="img/ChartIntro/09.jpg" />
<br/>
<br/>
<br/>
<br/>


<h3>ChartViewModelクラスに下記の感じに実装します。</h3>
<pre>
<code class="cs">
using System.Drawing;

namespace ChartIntroduction.ViewModels
{
    public class ChartViewModel : NotificationObject
    {
        int[] OkData = { 10503, 9993, 5004, 12305, 7604, 9994, 4196,
                         12345, 6467, 8858, 1305, 3467, 7774, 3735};

        int[] NgData = { 30, 54, 65, 86, 44, 22, 16,
                         87, 64, 8, 1, 76, 77, 85};

        string[] label = { "\"8/10\"", "\"8/11\"", "\"8/12\"", "\"8/13\"", "\"8/14\"", "\"8/15\"", "\"8/16\"",
            "\"8/17\"", "\"8/18\"", "\"8/19\"", "\"8/20\"", "\"8/21\"", "\"8/22\"", "\"8/23\"" };

        int[] NoLabel = { 53, 23, 54, 42, 44, 64, 54,
                         45, 67, 58, 63, 75, 77, 35};
        int[] Mekure = { 30, 54, 45, 36, 44, 32, 56,
                         37, 34, 38, 43, 26, 27, 45};
        int[] Shiwa = { 13, 3, 5, 5, 4, 9, 6,
                         5, 7, 8, 13, 7, 7, 5};
        int[] Yabure = { 3, 4, 4, 6, 6, 2, 1,
                         7, 6, 8, 1, 7, 7, 8};

        int[] part = { 53, 23, 24, 2 };
        string[] partName = { "\"天面\"", "\"側面\"", "\"胴部\"", "\"底部\"" };
        string[] partColor = { "\"rgba(94, 142, 134, 0.5)\"", "\"rgba(186, 64, 48, 0.5)\"", "\"rgba(226, 221, 202, 0.5)\"", "\"rgba(44, 46, 60, 0.5)\"" };

        int[] No1 = { 53, 23, 54, 42, 44 };
        int[] No2 = { 11, 80, 11, 82, 92 };
        int[] No3 = { 44, 5, 73, 78, 27 };
        string[] ngKind = { "\"位置決め\"", "\"やぶれ\"", "\"めくれ\"", "\"しわ\"", "\"ラベル無し\"" };

        public ChartViewModel()
        {
            this.GraphKind = KindSelectList.Last();
        }

        private void CreateDynamicChart()
        {
            if (GraphKind == "bar")
            {
                this.ChartItems = new BarChartItem[]
                {
                new BarChartItem(OkData)
                {
                    Labels = label,
                    Label = "OK数",
                    BackgroundColor = Color.FromArgb(100, 94, 142, 134),
                    BorderColor = Color.FromArgb(255, 94, 142, 134),
                    BorderWidth = 1,
                },

                new BarChartItem(NgData)
                {
                    Label = "NG数",
                    BackgroundColor = Color.FromArgb(100, 186, 64, 48),
                    BorderColor = Color.FromArgb(255, 186, 64, 48),
                    BorderWidth = 1,
                },
                };
            }
            else if (GraphKind == "line")
            {
                this.ChartItems = new LineChartItem[]
                {
                new LineChartItem(NoLabel)
                {
                    Labels = label,
                    Label = "ラベル無し",
                    BorderColor = Color.FromArgb(200, 94, 142, 134),
                    BorderWidth = 1,
                },
                new LineChartItem(Mekure)
                {
                    Labels = label,
                    Label = "めくれ",
                    BorderColor = Color.FromArgb(200, 186, 64, 48),
                    BorderWidth = 1,
                },
                new LineChartItem(Shiwa)
                {
                    Labels = label,
                    Label = "しわ",
                    BorderColor = Color.FromArgb(200, 226, 221, 202),
                    BorderWidth = 1,
                },
                new LineChartItem(Yabure)
                {
                    Labels = label,
                    Label = "やぶれ",
                    BorderColor = Color.FromArgb(200, 44, 46, 60),
                    BorderWidth = 1,
                },
                };
            }
            else if (GraphKind == "pie")
            {
                this.ChartItems = new PieChartItem[]
                {
                new PieChartItem(part, partColor)
                {
                    Labels = partName,
                    Label = "ラベル無し",
                    BorderColor = Color.FromArgb(200, 30, 10, 233),
                    BorderWidth = 1,
                },
                };
            }
            else if (GraphKind == "radar")
            {
                this.ChartItems = new RadarChartItem[]
                {
                new RadarChartItem(No1)
                {
                    Labels = ngKind,
                    Label = "品種1",
                    BorderColor = Color.FromArgb(200, 94, 142, 134),
                    BorderWidth = 1,
                },
                new RadarChartItem(No2)
                {
                    Labels = ngKind,
                    Label = "品種2",
                    BorderColor = Color.FromArgb(200, 186, 64, 48),
                    BorderWidth = 1,
                },
                new RadarChartItem(No3)
                {
                    Labels = ngKind,
                    Label = "品種3",
                    BorderColor = Color.FromArgb(200, 44, 46, 60),
                    BorderWidth = 1,
                },
                };
            }
        }


        private string _graphKind = "";
        public string GraphKind
        {
            get => this._graphKind;
            set
            {
                SetProperty(ref this._graphKind, value);
                CreateDynamicChart();
            }
        }

        private List&lt;string> _kindSelectList = new List&lt;string>() { "bar", "line", "pie", "radar" };
        public List&lt;string> KindSelectList
        {
            get => this._kindSelectList;
        }

        private IEnumerable&lt;ChartItem>? _chartItems;
        public IEnumerable&lt;ChartItem>? ChartItems
        {
            get => this._chartItems;
            set { SetProperty(ref this._chartItems, value); }
        }

    }
}

</code>
</pre>

<h3>表示ページにコンボボックスとChartコンポーネントを実装します。</h3>
<img src="img/ChartIntro/11.jpg" />
<br/>
<br/>
<br/>
<br/>


<h3>グラフ種類選択して、こんな感じになれば成功です。</h3>
<img src="img/ChartIntro/12.jpg" />



